`
<section>
<a href="https://leetcode.com/problems/minimum-number-of-steps-to-make-two-strings-anagram/description/?envType=daily-question&envId=2024-01-13">
Problem Source: LeetCode
</a>
<h1>
Statement
</h1>
<p>
You are given two strings of the same length s and t. In one step you can choose any character of t and replace it with another character.
</p>
<p>
Return the minimum number of steps to make t an anagram of s.
</p>
<p>
An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.
</p>
<p>
You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.
</p>
<h1>
Example
</h1>
<p>
Input: s = "bab", t = "aba"
</p>
<p>
Output: 1
</p>
<p>
Explanation: Replace the first 'a' in t with b, t = "bba" which is anagram of s.
</p>
<h1>
Solution
</h1>
<p>
We use two maps for keeping track of the frequency of all characters from string 's' and from string 't'.
</p>
<p>
We then sum up all the differences between the frequency of the characters that appear in the map of string 's' and the frequency of the same characters but of the string 't'.
</p>
<p>
In other words, we check how many more times the character appears in string 's' than in string 't' and we sum up these differences.
</p>
<p>
</p>
<p>
</p>
<h1>
Implementation
</h1>
<pre>
<code>
class Solution {
public:
    int minSteps(string s, string t) {
        unordered_map<char, int> ms, mt;

        for(auto i : s)
            ms[i] = 0;
        for(auto i : s)
            ms[i]++;
        
        for(auto i : t)
            mt[i] = 0;
        for(auto i : t)
            mt[i]++;
        
        int sum = 0;
        for(auto i : ms)
        {
            char c = i.first;
            int f = i.second;
            if(mt[c] <= f)
                sum += f-mt[c];
        }

        return sum;
    }
};
</code>
</pre>
</section>
`