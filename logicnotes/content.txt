`
<section>
<a href="https://leetcode.com/problems/network-delay-time/description/">
Problem Source: LeetCode
</a>
<h1>
Statement
</h1>
<p>
You are given a network of n nodes, labeled from 1 to n. You are also given times, a list of travel times as directed edges times[i] = (ui, vi, wi), where ui is the source node, vi is the target node, and wi is the time it takes for a signal to travel from source to target.
</p>
<p>
We will send a signal from a given node k. Return the minimum time it takes for all the n nodes to receive the signal. If it is impossible for all the n nodes to receive the signal, return -1.
</p>
<h1>
Example
</h1>
<img src="https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png"/>
<p>
Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
</p>
<p>
Output: 2
</p>
<h1>
Solution
</h1>
<p>
We build the adjancey list of the directed graph and run a Breadth-First Search (BFS) from node K to find out the minimum cost required to traverse all nodes in the graph.
</p>
<h1>
Implementation
</h1>
<pre>
<code>
class Solution {
public:
    int networkDelayTime(vector<vector<int>>& edges, int n, int k) {
        vector<vector<pair<int, int>>> list(n+1);

        //Build adjacency list
        for(auto edge : edges)
        {
            int a = edge[0];
            int b = edge[1];
            int w = edge[2];

            list[a].push_back({b, w});
        }

        vector<int> min_dist(n+1, INT_MAX);
        int maximum = -1;
        queue<int> q;

        min_dist[k] = 0;
        q.push(k);

        while(!q.empty())
        {
            int i = q.front();
            q.pop();
            for(auto [j, w] : list[i])
            {
                if(min_dist[i] + w < min_dist[j])
                {
                    min_dist[j] = min_dist[i] + w;
                    q.push(j);
                }
            }
        }


        for(int i = 1;i <= n;i++)
            if(min_dist[i] > maximum)
                maximum = min_dist[i];

        if(maximum == INT_MAX)
            return -1;

        return maximum;
    }
};
</code>
</pre>
</section>
`