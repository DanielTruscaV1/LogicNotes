`
<section>
<h1>
Statement
</h1>
<p>
Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>
</p>
<h1>
Example
</h1>
<p>
Input: n = 3
</p>
<p>
Output: ["((()))","(()())","(())()","()(())","()()()"]
</p>
<h1>
Solution
</h1>
<p>
We use top-down dynamic programming to generate all the possible combinations of well-formed parentheses.
</p>
<h1>
Implementation
</h1>
<pre>
<code>
class Solution {
public:

    string str = "";

    void put_paranthesis(vector<string> &result, int open, int closed)
    {
        if(open == 0 && closed == 0)
        {
            result.push_back(str);
        }
        else
        { 
            if(open > 0)
            {
                string t = str;
                str += '(';
                put_paranthesis(result, open-1, closed);
                str = t;
            }
            if(closed > open)
            {
                string t = str;
                str += ')';
                put_paranthesis(result, open, closed-1);
                str = t;
            }
        }
    }

    vector<string> generateParenthesis(int n) {
        int open = n;
        int closed = n;
        vector<string> result;
        put_paranthesis(result, open, closed);
        return result;
    }
};
</code>
</pre>
</section>
`